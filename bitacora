#!/usr/bin/env python3

import sys
import os
import random
import re
import shutil
from string import Template
from bs4 import BeautifulSoup
from datetime import datetime
from pathlib import Path
import markdown



HTML_ROOT_DIR="./htmltest"
MD_ROOT_DIR="./mdtest"
HTML_TEMPLATES="./templates"

#
# En este array guardamos todos los articulos procesados en forma
# de tuplas. Cada tupla está formada por (ruta del artículo, usuario, fecha)
#
posts=[]




#
# Crea una página de índice con los úĺtimos artículos de todos
# los usuarios. Esta sería la portada general del blog
#
def createMainBlogIndex(limit=10):
    indexContent=""
    i=0
    posts.sort(key=lambda t:t[2],reverse=True)
    for post in posts:
        path=post[0]
        author=post[1]
        filecontent=Path(HTML_ROOT_DIR+"/"+path).read_text()
        url=path
        title,summary = getTitleAndSummaryFromArticle(filecontent)
        sdate=getDateFromString(os.path.basename(path).strip(".html"))
        pdate=sdate.strftime("%d/%m/%Y")
        with open(HTML_TEMPLATES+"/user-index-last-entry.html") as t:
                template=Template(t.read())
                newitem=template.substitute(title=title,url=url,
                author=author,date=pdate,summary=summary)
        indexContent+=newitem
        i+=1
        if (i==limit):
            break

    print ("Creating general /index.html")
    with open(HTML_TEMPLATES+"/main-index.html") as t:
        template=Template(t.read())
        html=template.substitute(index=indexContent)
        with open(HTML_ROOT_DIR+"/index.html","w") as f:
            f.write(html)
            f.close()


#
# Extra el título y el resumen (primer párrafo) de un contenido
# html usando el scrapper 
#
def getTitleAndSummaryFromArticle(filecontent):
    soup = BeautifulSoup(filecontent, "html.parser")
    title=soup.select("#article-content h1")
    if len(title)>0:
        title=title[0].text
    else:
        title=""
    summary=soup.find("p").text
    return title,summary



#
# Crea una página de index que enlaza los ficheros contenidos
# en ese directorio añadiendo el resumen a cada artículo
#
def createMainIndexFrom(user,limit=5):
    indexContent=""
    i=0
    files=os.listdir(HTML_ROOT_DIR+"/"+user)
    files.sort(reverse=True)
    for filename in os.listdir(HTML_ROOT_DIR+"/"+user):
        if filename=="index.html":
            continue
        filecontent=Path(HTML_ROOT_DIR+"/"+user+"/"+filename).read_text()
        url=filename
        title,summary = getTitleAndSummaryFromArticle(filecontent)
        sdate=getDateFromString(filename.strip(".html"))
        pdate=sdate.strftime("%d/%m/%Y")
        with open(HTML_TEMPLATES+"/user-index-last-entry.html") as t:
                template=Template(t.read())
                newitem=template.substitute(title=title,url=url,
                author=user,date=pdate,summary=summary)
        indexContent+=newitem
        i+=1
        if (i==limit):
            break

    print ("Creating "+user+"/index.html")
    with open(HTML_TEMPLATES+"/user-index-last.html") as t:
        template=Template(t.read())
        html=template.substitute(user=user,index=indexContent)
        with open(HTML_ROOT_DIR+"/"+user+"/index.html","w") as f:
            f.write(html)
            f.close()


#
# Crea la página con el indice total de todos los articulos
# creados por un usuario. Esta vez sin resumen. Solo mostrando
# la fecha de cada uno de ellos
#
def createFullIndexFrom(user):
    indexContent=""
    files=os.listdir(HTML_ROOT_DIR+"/"+user)
    files.sort(reverse=True)
    for filename in files:
        if (filename=="index.html") or (filename=="index-all.html"):
            continue

        filecontent=Path(HTML_ROOT_DIR+"/"+user+"/"+filename).read_text()
        url=filename
        title,summary = getTitleAndSummaryFromArticle(filecontent)
        sdate=getDateFromString(filename.strip(".html"))
        pdate=sdate.strftime("%d/%m/%Y")
        with open(HTML_TEMPLATES+"/user-index-all-entry.html") as t:
                template=Template(t.read())
                newitem=template.substitute(title=title,url=url,date=pdate)
        indexContent+=newitem

        # Añado el artículo al array general
        posts.append((user+"/"+filename,user,sdate))

    print ("Creating "+user+"/index-all.html")
    with open(HTML_TEMPLATES+"/user-index-all.html") as t:
        template=Template(t.read())
        html=template.substitute(user=user,index=indexContent)
        with open(HTML_ROOT_DIR+"/"+user+"/index-all.html","w") as f:
            f.write(html)
            f.close()    


def extractTitleFromMD(mdcontent):
    regex = r"^# (.+)"
    test_str=mdcontent
    matches = re.search(regex, test_str, re.MULTILINE)
    return matches.groups()[0]




# 
# Esta función publica el contenido aceptado de un usuario convirtiéndolos en
# HTML y colocándolos en el directorio correspondiente i indicado en
# HTML_ROOT_DIR
#
def publishUserContent(user,template):
    print ("Generating HTML content from "+user)
    for filename in os.listdir(MD_ROOT_DIR+"/"+user):
        with open(MD_ROOT_DIR+"/"+user+"/"+filename) as f:
            md=f.read()
            title=extractTitleFromMD(md)
            htmlpost = markdown.markdown(md)
            bname=createRandomDateString()
            date=getDateFromString(bname).strftime("%d/%m/%Y")
            #
            # Ojo!!!!!! : aqui deberia generar el nombre del html 
            # segun la fecha de publicación actual
            #
            title,summary = getTitleAndSummaryFromArticle(htmlpost)
            html=template.substitute(content=htmlpost,user=user,date=date)
            with open(HTML_ROOT_DIR+"/"+user+"/"+bname+".html","w") as h:
                h.write(html)
                h.close()
                f.close()


#
# Esta función publica el contenido de todos los usuarios
# y crea todos los índices de los usuarios
#
def publishAllContent():

    contentTemplate=""
    with open(HTML_TEMPLATES+"/user-full-post.html") as t:
        contentTemplate=Template(t.read())
        if contentTemplate=="":
            return
    
    os.system("rm -r "+HTML_ROOT_DIR)
    os.system("mkdir -p "+HTML_ROOT_DIR)
    for user in os.listdir(MD_ROOT_DIR):
        os.system("mkdir -p "+HTML_ROOT_DIR+"/"+user)
        publishUserContent(user,contentTemplate)
        createMainIndexFrom(user)
        createFullIndexFrom(user)

    os.system("cp -r ./resources "+HTML_ROOT_DIR)
    createMainBlogIndex()





#
# Crea una fecha aleatoria en formato string
#
def createRandomDateString():
    randay=str(random.randrange(1,27)).zfill(2)
    randmonth=str(random.randrange(1,12)).zfill(2)
    randyear=str(random.randrange(2017,2022))
    return randyear+randmonth+randay

#
# Retorna un objeto fecha a partir de un string
# con la forma DDMMYYYY
#
def getDateFromString(datestr):
    return datetime.strptime(datestr,"%Y%m%d")





if __name__=='__main__':
    if len(sys.argv)<2:
        print ("\t\t bitacora [ --build | --moderate ] ")
        sys.exit(0)

    if sys.argv[1]=="--build":
        publishAllContent()


    if sys.argv[1]=="--moderate":
        print ("No implementado")


### Código de ejemplo de moderación
### usando la herramienta externa glow


# POSTS=`find . -type f -name '*.md'`
# REJECTS_FILE='comentarios.txt'


# for P in $POSTS
# do
#     echo
#     echo "------------------------------------------------------------"
#     echo "Revisando artículo $P"
#     glow -p $P

#     DIR=$(dirname -- "$P")
#     TITLE=`grep ^# $P | head -1`
#     TITLE=${TITLE#?}

#     echo "¿Aceptas el artículo para su publicación?"
#     read -p "[S]i    [N]o    [C]ancelar y continuar con otro: " OPCION
#     echo
#     if [ "$OPCION" == "s" ] || [ "$OPCION" == "S" ]
#     then
# 	echo "Artículo aceptado"
# 	echo -e "* [ACEPTADO]\t$TITLE" >> "$DIR/$REJECTS_FILE"
#     else	
# 	echo "Artículo rechazado"
# 	echo -e "* [RECHAZADO]\t$TITLE" >> "$DIR/$REJECTS_FILE"
# 	echo " Artículo rechazado debido a:" > /tmp/reject.comment
# 	nano /tmp/reject.comment
# 	cat /tmp/reject.comment  >> "$DIR/$REJECTS_FILE"
# 	echo  >> "$DIR/$REJECTS_FILE"
#     fi

#     # El fichero md debe ser borrado del directorio de artículos propuestos
#     # tanto si es aceptado como sino
# done