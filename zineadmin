#!/usr/bin/env python3

import sys
import os
import grp
import random
import re
import shutil
from string import Template
from bs4 import BeautifulSoup
from datetime import datetime,timezone
from pathlib import Path
import markdown
import filecmp
from feedgen.feed import FeedGenerator
import urllib.parse

## Ruta de instalación de zine
INSTALL_PATH="/opt/zine"

## Lugar de publicación de los ficheros html
HTML_ROOT_DIR="/var/www/html/agora" 

## Lugar del SF donde están los artículos aceptados y listos para publicar
ZINE_REPO="/var/agora" 

## Directorio donde encontrar los artículos en borrador
USR_ROOT="/var/publico"


MAX_IMG_SIZE=500  # Kilobytes
ACCEPTED_DIR=ZINE_REPO+"/users"    
STATIC_FILES=ZINE_REPO+"/static"
HTML_TEMPLATES=INSTALL_PATH+"/templates"
CSS_FILE=INSTALL_PATH+"/resources/estilo.css"
FONTS=INSTALL_PATH+"/resources/fonts"
ZINE_USERS_LOG_FILE="registro.txt"
ZINE_MODERATE_LOG_FILE="moderate-log.txt"
ZINE_ADMIN_GROUP_NAME="zineadm"
FEED_FILE=HTML_ROOT_DIR+"/atom.xml"

MESSAGE_NEW_POST="\n\t ========= ARTÍCULO NUEVO ========= \n\n"
MESSAGE_UPDATE_POST="\n\t ========= ARTÍCULO PARA ACTUALIZAR  ========= \n\n"

DEBUG_MODE=False


#
# En este array guardamos todos los articulos procesados en forma
# de tuplas. Cada tupla está formada por (ruta del artículo, usuario, fecha)
#
posts=[]


def debug(error):
    if DEBUG_MODE and error!=None:
        print(error)



#
# Crea el feed rss del blog en general
#
def createFeed():
    fg = FeedGenerator()
    fg.link( href='http://hipatia.iesjovellanos.org/agora/atom.xml', rel='self' )
    fg.title('Ágora | Un blog del IES G.M. Jovellanos')
    fg.author( {'name':'IES Jovellanos','email':'hipatia.iesjovellanos@gmail.com'} )
    fg.language('es')
    fg.id("http://hipatia.iesjovellanos.org/agora/atom.xml")
    
    for post in posts:
        path=post[0]
        author=post[1]

        fe = fg.add_entry()
        url="http://"+urllib.parse.quote("hipatia.iesjovellanos.org/agora/users/"+path)
        filecontent=Path(HTML_ROOT_DIR+"/users/"+path).read_text()
        title,summary = getTitleAndSummaryFromArticle(filecontent)
        sdate=getDateFromString(os.path.basename(path).strip(".html")).replace(tzinfo=timezone.utc)
                
        fe.id(url)
        fe.title(title)
        fe.published(sdate)
        fe.updated(sdate)
        fe.content(url)
        fe.summary(summary)
        fe.description(summary)
        fe.link(href=url)

    atomfeed = fg.atom_str(pretty=True)
    fg.atom_file(FEED_FILE)


    

#
# Crea una página de índice con los úĺtimos artículos de todos
# los usuarios. Esta sería la portada general del blog
#
def createMainBlogIndex(limit=10):
    indexContent=""
    i=0
    posts.sort(key=lambda t:t[2],reverse=True)
    for post in posts:
        path=post[0]
        author=post[1]
        filecontent=Path(HTML_ROOT_DIR+"/users/"+path).read_text()
        url=path
        title,summary = getTitleAndSummaryFromArticle(filecontent)
        sdate=getDateFromString(os.path.basename(path).strip(".html"))
        pdate=sdate.strftime("%d/%m/%Y")
        with open(HTML_TEMPLATES+"/main-index-entry.html") as t:
                template=Template(t.read())
                newitem=template.substitute(title=title,url=url,
                author=author,date=pdate,summary=summary)
        indexContent=indexContent+newitem
        i+=1
        if (i==limit):
            break

    print ("Creating general /index.html")
    with open(HTML_TEMPLATES+"/main-index.html") as t:
        template=Template(t.read())
        html=template.substitute(index=indexContent)
        with open(HTML_ROOT_DIR+"/index.html","w") as f:
            f.write(html)
            f.close()


#
# Crea la página con el indice total de todos los artículos
# Solo mostrando la fecha de cada uno de ellos, el autor y el título
#
def createFullBlogIndex():
    indexContent=""
    i=0
    posts.sort(key=lambda t:t[2],reverse=True)
    for post in posts:
        path=post[0]
        author=post[1]
        filecontent=Path(HTML_ROOT_DIR+"/users/"+path).read_text()
        url=path
        title,summary = getTitleAndSummaryFromArticle(filecontent)
        sdate=getDateFromString(os.path.basename(path).strip(".html"))
        pdate=sdate.strftime("%d/%m/%Y")
        with open(HTML_TEMPLATES+"/main-index-all-entry.html") as t:
                template=Template(t.read())
                newitem=template.substitute(title=title,url=url,
                user=author,date=pdate,summary=summary)
        indexContent=indexContent+newitem

    print ("Creating general /index.html")
    with open(HTML_TEMPLATES+"/main-index-all.html") as t:
        template=Template(t.read())
        html=template.substitute(index=indexContent)
        with open(HTML_ROOT_DIR+"/index-all.html","w") as f:
            f.write(html)
            f.close()


#
# Extra el título y el resumen (primer párrafo) de un contenido
# html usando el scrapper 
#
def getTitleAndSummaryFromArticle(filecontent):
    soup = BeautifulSoup(filecontent, "html.parser")
    title=soup.select("#article-content h1")
    if len(title)>0:
        title=title[0].text
    else:
        title=""
    summary=soup.find("p").text
    return title,summary


#
# Crea una página de index que enlaza los ficheros contenidos
# en ese directorio añadiendo el resumen a cada artículo
#
def createMainIndexFrom(user,limit=5):
    indexContent=""
    i=0
    files=os.listdir(HTML_ROOT_DIR+"/users/"+user)
    files.sort()
    for filename in files:
        if filename=="index.html":
            continue
        filecontent=Path(HTML_ROOT_DIR+"/users/"+user+"/"+filename).read_text()
        url=filename
        title,summary = getTitleAndSummaryFromArticle(filecontent)
        sdate=getDateFromString(filename.strip(".html"))
        pdate=sdate.strftime("%d/%m/%Y")
        with open(HTML_TEMPLATES+"/user-index-last-entry.html") as t:
                template=Template(t.read())
                newitem=template.substitute(title=title,url=url,
                author=user,date=pdate,summary=summary)
        indexContent=newitem+indexContent
        i+=1
        if (i==limit):
            break

    print ("Creating "+user+"/index.html")
    with open(HTML_TEMPLATES+"/user-index-last.html") as t:
        template=Template(t.read())
        html=template.substitute(user=user,index=indexContent)
        with open(HTML_ROOT_DIR+"/users/"+user+"/index.html","w") as f:
            f.write(html)
            f.close()


#
# Crea la página con el indice total de todos los artículos
# creados por un usuario. Esta vez sin resumen. Solo mostrando
# la fecha de cada uno de ellos
#
def createFullIndexFrom(user):
    indexContent=""
    files=os.listdir(HTML_ROOT_DIR+"/users/"+user)
    files.sort(reverse=True)
    for filename in files:
        if (filename=="index.html") or (filename=="index-all.html"):
            continue

        filecontent=Path(HTML_ROOT_DIR+"/users/"+user+"/"+filename).read_text()
        url=filename
        title,summary = getTitleAndSummaryFromArticle(filecontent)
        sdate=getDateFromString(filename.strip(".html"))
        pdate=sdate.strftime("%d/%m/%Y")
        with open(HTML_TEMPLATES+"/user-index-all-entry.html") as t:
                template=Template(t.read())
                newitem=template.substitute(title=title,url=url,date=pdate)
        indexContent+=newitem

        # Añado el artículo al array general
        posts.append((user+"/"+filename,user,sdate))

    print ("Creating "+user+"/index-all.html")
    with open(HTML_TEMPLATES+"/user-index-all.html") as t:
        template=Template(t.read())
        html=template.substitute(user=user,index=indexContent)
        with open(HTML_ROOT_DIR+"/users/"+user+"/index-all.html","w") as f:
            f.write(html)
            f.close()    


#
# Extrae el título de un documento markdown. 
# Se queda con el texto del primer encabezado
#
def extractTitleFromMD(mdcontent):
    regex = r"^# (.+)"
    test_str=mdcontent
    matches = re.search(regex, test_str, re.MULTILINE)
    if (matches==None):
        return ""
    return matches.groups()[0]


#
# Determina si un artículo tiene la marca de borrador
#
def isDraft(mdfile):
    with open(mdfile,"r") as f:
        regex = r"^@\+BORRADOR"
        test_str=f.read()
        matches = re.search(regex, test_str, re.MULTILINE)
        return  matches!=None
    return true



# 
# Esta función publica el contenido aceptado de un usuario convirtiéndolos en
# HTML y colocándolos en el directorio correspondiente i indicado en
# HTML_ROOT_DIR
#
def publishUserContent(user,template):
    print ("Generating HTML content from "+user)
    for filename in os.listdir(ACCEPTED_DIR+"/"+user):
        if filename == "registro.txt":
            continue
        with open(ACCEPTED_DIR+"/"+user+"/"+filename) as f:
            md=f.read()
            title=extractTitleFromMD(md)
            htmlpost = markdown.markdown(md,extensions=['tables','fenced_code'])
            sdate=getDateFromString(filename.strip(".md"))
            pdate=sdate.strftime("%Y%m%d")
            title,summary = getTitleAndSummaryFromArticle(htmlpost)
            html=template.substitute(content=htmlpost,user=user,date=sdate.strftime("%d/%m/%Y"))
            with open(HTML_ROOT_DIR+"/users/"+user+"/"+pdate+".html","w") as h:
                h.write(html)
                h.close()
                f.close()



# 
# Esta función publica el contenido estático de resources/static
#
def publishStaticContent():
    template=""
    try:
        with open(HTML_TEMPLATES+"/static-post.html") as t:
            template=Template(t.read())
            if template=="":
                return

        for filename in os.listdir(STATIC_FILES):
            with open(STATIC_FILES+"/"+filename) as f:
                md=f.read()
                title=extractTitleFromMD(md)
                htmlpost = markdown.markdown(md)
                htmlname=filename.strip(".md")
                html=template.substitute(content=htmlpost)
                with open(HTML_ROOT_DIR+"/static/"+htmlname+".html","w") as h:
                    h.write(html)
                    h.close()
                    f.close()
    except FileNotFoundError as ferr:
        print ("ERROR: No se encontro fichero: "+str(ferr))




#
# Esta función publica el contenido de todos los usuarios
# y crea todos los índices de los usuarios
#
def publishAllContent():
    contentTemplate=""
    with open(HTML_TEMPLATES+"/user-full-post.html") as t:
        contentTemplate=Template(t.read())
        if contentTemplate=="":
            return
    
    os.system("rm -r "+HTML_ROOT_DIR)
    os.system("mkdir -p "+HTML_ROOT_DIR)
    os.system("mkdir -p "+HTML_ROOT_DIR+"/resources")
    os.system("mkdir -p "+HTML_ROOT_DIR+"/static")
    os.system("mkdir -p "+HTML_ROOT_DIR+"/users")
    for user in os.listdir(ACCEPTED_DIR):
        os.system("mkdir -p "+HTML_ROOT_DIR+"/users/"+user)
        publishUserContent(user,contentTemplate)
        createMainIndexFrom(user)
        createFullIndexFrom(user)

    print ("Updating CSS and fonts")
    os.system("cp "+CSS_FILE+" "+HTML_ROOT_DIR+"/resources")
    os.system("cp -r "+FONTS+" "+HTML_ROOT_DIR+"/resources")

    #print ("Generating static content")
    #publishStaticContent()
    print ("Generating General Index")
    createMainBlogIndex()
    createFullBlogIndex()
    print ("Generating RSS Feed")
    createFeed()


#
# Acepta el artículo moviéndolo desde el espacio personal del usuario
# al repositorio de artículos aceptados
#
def acceptPost(srcpath,user):
    try:
        os.makedirs(ACCEPTED_DIR+"/"+user)
    except FileExistsError as err:
        #print (err)
        pass

    filename=os.path.basename(srcpath)
    dstpath=ACCEPTED_DIR+"/"+user+"/"+filename
    shutil.copyfile(srcpath, dstpath)
    log(ACCEPTED_DIR+"/"+user+"/"+ZINE_USERS_LOG_FILE,filename+"  ACEPTADO") 
    log(ZINE_REPO+"/"+ZINE_MODERATE_LOG_FILE, srcpath+"  ACEPTADO")



def rejectPost(srcpath,user,comment=""):
    filename=os.path.basename(srcpath)
    log(ACCEPTED_DIR+"/"+user+"/"+ZINE_USERS_LOG_FILE,filename+"  RECHAZADO  "+comment) 
    log(ZINE_REPO+"/"+ZINE_MODERATE_LOG_FILE,srcpath+"  RECHAZADO  "+comment)


def ignorePost(srcpath,user,comment=""):
    filename=os.path.basename(srcpath)
    log(ACCEPTED_DIR+"/"+user+"/"+ZINE_USERS_LOG_FILE,filename+"  EN ESPERA  "+comment) 



def log(logfile, message):
    try:
        with open(logfile,"a+") as f:
            f.write(message+"\n")
            f.close()
    except Exception as e:
        print ("ERRROR: Fallo escritura en log: "+logfile)



#
# Retorna un objeto fecha a partir de un string
# con la forma DDMMYYYY
#
def getDateFromString(datestr):
    return datetime.strptime(datestr,"%Y%m%d")



#
# Extrae las rutas de las imágenes locales de un fichero
# markdown. Las rutas deben empezar por "./img/" o "img/"
# Retorna un array de tuplas con la forma (rutaImagen, tamañoEnKb)
#
def extractImages(filepath):
    images_info=[]
    f = open(filepath)
    content = f.read()
    userdir=os.path.dirname(filepath)
    images=re.findall("!\[.*?\]\(\.?\/?img/(.*?)\)",content)
    for img in images:
        img_path=userdir+"/img/"+img
        kb_size=int(Path(img_path).stat().st_size/1024)
        images_info.append((os.path.basename(img_path),kb_size))
    return images_info




#
# Construye la cola de archivos pendientes de moderación
#
def moderateQueue():
    moderateFiles=[]  #(archivo, user, flag_nuevo)
    for user in os.listdir(USR_ROOT):
        userdir=USR_ROOT+"/"+user+"/blog"
        if not os.path.exists(userdir) :
            continue
        if (not os.access(userdir, os.R_OK)):
            print ("ERROR: El usuario "+user+" no permite el acceso a su directorio de artículos")
            continue
        
        for mdfile in os.listdir(userdir):
            if (not mdfile.endswith(".md")):
                continue
            srcfile=userdir+"/"+mdfile
            acceptedfile=ACCEPTED_DIR+"/"+user+"/"+mdfile
            if (isDraft(srcfile)):
                continue
            if (not os.access(srcfile, os.R_OK)):
                continue
            if not os.path.exists(acceptedfile):
                moderateFiles.append((srcfile, acceptedfile, user,True))      # articulo nuevo
            else: 
                if not filecmp.cmp(srcfile,acceptedfile):
                    moderateFiles.append((srcfile, acceptedfile, user, False)) # articulo para actualizar
    return moderateFiles


#
# Muestra el número de artículos listos para ser moderados
#
def showModerateList():
    moderateFiles=moderateQueue()
    print("Hay "+str(len(moderateFiles))+" artículos pendientes de moderación")
    

#
# Traspasa ficheros desde los directorios personales de los usuarios
# al repositorio general de ficheros aceptados en ACCEPTED_DIR
#
def moderateContent():

    moderateFiles=moderateQueue()

    try:
        print("Hay "+str(len(moderateFiles))+" artículos pendientes de moderación")
        input("Pulsa 'enter' para iniciar la revisión o Ctrl+C para abandonar\n")
    except KeyboardInterrupt as err:
        debug(err)
        return

    for srcpath,acceptpath,user,newpost in moderateFiles:
        nextpost=False
        while not nextpost:
            os.system("clear")

            images_used=extractImages(srcpath)
            img_warning=""
            for i in images_used:
                if (i[1]> MAX_IMG_SIZE):
                    img_warning+="\tLa imagen "+i[0]+" ocupa demasiado\n"
            
            if (isDraft(srcpath)):
                ignorePost(srcfile,user,"Artículo en borrador")
                continue
            if (not os.access(srcpath, os.R_OK)):
                rejectPost(srcfile, user, "Revisa los permisos de acceso de tu artículo. El moderador no tiene acceso al artículo.")
                continue

            if newpost:
                msg=MESSAGE_NEW_POST+"\tFichero "+srcpath+"\n\tUsuario: "+user+"\n\n"
                if img_warning!="":
                    msg+=img_warning+"\n"
                os.system('echo -n "'+msg+'""$(cat '+srcpath+')" | less -c')
            else:
                msg=MESSAGE_UPDATE_POST+"\tFichero "+srcpath+"\n\tUsuario: "+user+"\n\n"
                if img_warning!="":
                    msg+=img_warning+"\n"

                os.system('echo -n "'+msg+'""$(diff -c '+acceptpath+' '+srcpath+')" | less -c')
            try:
                print("¿Aceptas el artículo "+srcpath+"? Pulsa")
                opt=input(" [S]i\t[N]o\t[I]gnorar\t[V]er de nuevo\t\tCtrl+C para abandonar: ")
                if opt=="S" or opt=="s":
                    acceptPost(srcpath,user)
                    nextpost=True
                if opt=="N" or opt=="n":
                    comments=input("Escribe brevemente las razón del rechazo: ")
                    rejectPost(srcpath,user, comments)
                    nextpost=True
                if opt=="I" or opt=="i":
                    ignorePost(srcpath,user)
                    nextpost=True

            except Exception as err:
                debug(err)
                return



if __name__=='__main__':

    try:
        grp.getgrnam(ZINE_ADMIN_GROUP_NAME)
    except KeyError:
        print("El grupo "+ZINE_ADMIN_GROUP_NAME+" no existe y debería estar presente. Consulte este problema con el administrador")
        sys.exit(0)

    if (len(sys.argv)<2) or ((sys.argv[1]!="--build") and (sys.argv[1]!="--moderate")and (sys.argv[1]!="--list")):
        print ("\t\t zineadmin [ --build | --moderate | --list ] ")
        sys.exit(0)

    if sys.argv[1]=="--build":
        publishAllContent()


    if sys.argv[1]=="--moderate":
        moderateContent()

    if sys.argv[1]=="--list":
        showModerateList()
